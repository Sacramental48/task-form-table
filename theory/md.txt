Данный код, спустя три секунды, выводит в console.log() - undefined.
Это происходит потому, что у нас объявлена функциональная переменная var, в совокупность с замыканием, которое создает setTimeout. После окончания работы цикла переменная i будет равна 4-м. Соотвественно отработав 4 раза функция обратиться в arr[4] и получит undefined.
Вот варианты избавления от подобной проблемы:

Вариант исправление с var:
setTimeout получает index, тем самым итерация идет по index, а не переменной, которая у нас уже undefined.
3000 * i - использую i для создания эффекта последовательной задержки, увеличивая время задержки для каждой итерации цикла.
, i - Это просто аргумент, который передает текущее значение индекса элемента массива в функцию обратного вызова.
for(var i = 0; i < arr.length; i++) {
    setTimeout((item) => {
        console.log(arr[item] > 13 ? `Good: ${arr[item]}` : `Bad: ${arr[item]}`);
    }, 3000 * i, i);
}

Первый вариант модификации:
for(let i = 0; i < arr.length; i++) {
    setTimeout(function() {
        console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
    }, 3000 * i);
}

Второй вариант модификации:
arr.forEach((item, index) => setTimeout(() => { console.log(item > 13 ? `Good: ${item}` : `Bad: ${item}`)}, 3000 * index));